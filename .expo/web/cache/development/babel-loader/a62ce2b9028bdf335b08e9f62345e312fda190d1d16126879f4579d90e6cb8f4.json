{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as SQLite from \"expo-sqlite\";\nimport * as FileSystem from \"expo-file-system\";\nimport { Asset } from \"expo-asset\";\nimport axios from \"axios\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar db = null;\nif (Platform.OS !== \"web\") {\n  db = SQLite.openDatabase(\"workouts.db\");\n} else {\n  console.warn(\"SQLite is not supported on web. Database features are disabled.\");\n}\nexport var initDatabase = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var result = yield new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name='exercises';\", [], function (_, _ref2) {\n            var _array = _ref2.rows._array;\n            return resolve(_array.length > 0);\n          }, function (_, error) {\n            return reject(error);\n          });\n        });\n      });\n      if (!result) {\n        var sqlContent = yield FileSystem.readAsStringAsync(require.resolve(\"./Workouts.sql\"), {\n          encoding: FileSystem.EncodingType.UTF8\n        });\n        var statements = sqlContent.split(\";\").map(function (statement) {\n          return statement.trim();\n        }).filter(function (statement) {\n          return statement.length > 0;\n        });\n        yield new Promise(function (resolve, reject) {\n          db.transaction(function (tx) {\n            statements.forEach(function (statement) {\n              tx.executeSql(statement, [], function () {}, function (_, error) {\n                console.error(\"SQL Error:\", error);\n                reject(error);\n              });\n            });\n          }, reject, resolve);\n        });\n      }\n      return true;\n    } catch (error) {\n      console.error(\"Database initialization error:\", error);\n      return false;\n    }\n  });\n  return function initDatabase() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getExercises = function getExercises() {\n  var muscleGroup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return new Promise(function (resolve, reject) {\n    var query = muscleGroup ? `SELECT e.* FROM exercises e \n         JOIN muscle_groups m ON e.muscle_group_id = m.id \n         WHERE m.name = ?;` : \"SELECT * FROM exercises;\";\n    var params = muscleGroup ? [muscleGroup] : [];\n    db.transaction(function (tx) {\n      tx.executeSql(query, params, function (_, _ref3) {\n        var _array = _ref3.rows._array;\n        return resolve(_array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var getMuscleGroups = function getMuscleGroups() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM muscle_groups;\", [], function (_, _ref4) {\n        var _array = _ref4.rows._array;\n        return resolve(_array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport default db;","map":{"version":3,"names":["SQLite","FileSystem","Asset","axios","Platform","db","OS","openDatabase","console","warn","initDatabase","_ref","_asyncToGenerator","result","Promise","resolve","reject","transaction","tx","executeSql","_","_ref2","_array","rows","length","error","sqlContent","readAsStringAsync","require","encoding","EncodingType","UTF8","statements","split","map","statement","trim","filter","forEach","apply","arguments","getExercises","muscleGroup","undefined","query","params","_ref3","getMuscleGroups","_ref4"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/database/database.js"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport * as FileSystem from \"expo-file-system\";\nimport { Asset } from \"expo-asset\";\nimport axios from \"axios\";\nimport { Platform } from \"react-native\";\n\nlet db = null;\nif (Platform.OS !== \"web\") {\n  db = SQLite.openDatabase(\"workouts.db\");\n} else {\n  // Optional: Provide a fallback or warning for web\n  console.warn(\n    \"SQLite is not supported on web. Database features are disabled.\"\n  );\n}\nexport const initDatabase = async () => {\n  try {\n    // Check if database needs to be initialized\n    const result = await new Promise((resolve, reject) => {\n      db.transaction((tx) => {\n        tx.executeSql(\n          \"SELECT name FROM sqlite_master WHERE type='table' AND name='exercises';\",\n          [],\n          (_, { rows: { _array } }) => resolve(_array.length > 0),\n          (_, error) => reject(error)\n        );\n      });\n    });\n\n    if (!result) {\n      // Read SQL file content\n      const sqlContent = await FileSystem.readAsStringAsync(\n        require.resolve(\"./Workouts.sql\"),\n        { encoding: FileSystem.EncodingType.UTF8 }\n      );\n\n      // Split SQL into individual statements\n      const statements = sqlContent\n        .split(\";\")\n        .map((statement) => statement.trim())\n        .filter((statement) => statement.length > 0);\n\n      // Execute each statement\n      await new Promise((resolve, reject) => {\n        db.transaction(\n          (tx) => {\n            statements.forEach((statement) => {\n              tx.executeSql(\n                statement,\n                [],\n                () => {},\n                (_, error) => {\n                  console.error(\"SQL Error:\", error);\n                  reject(error);\n                }\n              );\n            });\n          },\n          reject,\n          resolve\n        );\n      });\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Database initialization error:\", error);\n    return false;\n  }\n};\n\nexport const getExercises = (muscleGroup = null) => {\n  return new Promise((resolve, reject) => {\n    const query = muscleGroup\n      ? `SELECT e.* FROM exercises e \n         JOIN muscle_groups m ON e.muscle_group_id = m.id \n         WHERE m.name = ?;`\n      : \"SELECT * FROM exercises;\";\n\n    const params = muscleGroup ? [muscleGroup] : [];\n\n    db.transaction((tx) => {\n      tx.executeSql(\n        query,\n        params,\n        (_, { rows: { _array } }) => resolve(_array),\n        (_, error) => reject(error)\n      );\n    });\n  });\n};\n\nexport const getMuscleGroups = () => {\n  return new Promise((resolve, reject) => {\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"SELECT * FROM muscle_groups;\",\n        [],\n        (_, { rows: { _array } }) => resolve(_array),\n        (_, error) => reject(error)\n      );\n    });\n  });\n};\n\nexport default db;\n"],"mappings":";AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,UAAU,MAAM,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAG1B,IAAIC,EAAE,GAAG,IAAI;AACb,IAAID,QAAQ,CAACE,EAAE,KAAK,KAAK,EAAE;EACzBD,EAAE,GAAGL,MAAM,CAACO,YAAY,CAAC,aAAa,CAAC;AACzC,CAAC,MAAM;EAELC,OAAO,CAACC,IAAI,CACV,iEACF,CAAC;AACH;AACA,OAAO,IAAMC,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACtC,IAAI;MAEF,IAAMC,MAAM,SAAS,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACpDX,EAAE,CAACY,WAAW,CAAC,UAACC,EAAE,EAAK;UACrBA,EAAE,CAACC,UAAU,CACX,yEAAyE,EACzE,EAAE,EACF,UAACC,CAAC,EAAAC,KAAA;YAAA,IAAYC,MAAM,GAAAD,KAAA,CAAdE,IAAI,CAAID,MAAM;YAAA,OAASP,OAAO,CAACO,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC;UAAA,GACvD,UAACJ,CAAC,EAAEK,KAAK;YAAA,OAAKT,MAAM,CAACS,KAAK,CAAC;UAAA,CAC7B,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACZ,MAAM,EAAE;QAEX,IAAMa,UAAU,SAASzB,UAAU,CAAC0B,iBAAiB,CACnDC,OAAO,CAACb,OAAO,iBAAiB,CAAC,EACjC;UAAEc,QAAQ,EAAE5B,UAAU,CAAC6B,YAAY,CAACC;QAAK,CAC3C,CAAC;QAGD,IAAMC,UAAU,GAAGN,UAAU,CAC1BO,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAC,UAACC,SAAS;UAAA,OAAKA,SAAS,CAACC,IAAI,CAAC,CAAC;QAAA,EAAC,CACpCC,MAAM,CAAC,UAACF,SAAS;UAAA,OAAKA,SAAS,CAACX,MAAM,GAAG,CAAC;QAAA,EAAC;QAG9C,MAAM,IAAIV,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;UACrCX,EAAE,CAACY,WAAW,CACZ,UAACC,EAAE,EAAK;YACNc,UAAU,CAACM,OAAO,CAAC,UAACH,SAAS,EAAK;cAChCjB,EAAE,CAACC,UAAU,CACXgB,SAAS,EACT,EAAE,EACF,YAAM,CAAC,CAAC,EACR,UAACf,CAAC,EAAEK,KAAK,EAAK;gBACZjB,OAAO,CAACiB,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;gBAClCT,MAAM,CAACS,KAAK,CAAC;cACf,CACF,CAAC;YACH,CAAC,CAAC;UACJ,CAAC,EACDT,MAAM,EACND,OACF,CAAC;QACH,CAAC,CAAC;MACJ;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,KAAK;IACd;EACF,CAAC;EAAA,gBAtDYf,YAAYA,CAAA;IAAA,OAAAC,IAAA,CAAA4B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsDxB;AAED,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAA2B;EAAA,IAAvBC,WAAW,GAAAF,SAAA,CAAAhB,MAAA,QAAAgB,SAAA,QAAAG,SAAA,GAAAH,SAAA,MAAG,IAAI;EAC7C,OAAO,IAAI1B,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtC,IAAM4B,KAAK,GAAGF,WAAW,GACrB;AACR;AACA,2BAA2B,GACnB,0BAA0B;IAE9B,IAAMG,MAAM,GAAGH,WAAW,GAAG,CAACA,WAAW,CAAC,GAAG,EAAE;IAE/CrC,EAAE,CAACY,WAAW,CAAC,UAACC,EAAE,EAAK;MACrBA,EAAE,CAACC,UAAU,CACXyB,KAAK,EACLC,MAAM,EACN,UAACzB,CAAC,EAAA0B,KAAA;QAAA,IAAYxB,MAAM,GAAAwB,KAAA,CAAdvB,IAAI,CAAID,MAAM;QAAA,OAASP,OAAO,CAACO,MAAM,CAAC;MAAA,GAC5C,UAACF,CAAC,EAAEK,KAAK;QAAA,OAAKT,MAAM,CAACS,KAAK,CAAC;MAAA,CAC7B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,IAAMsB,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;EACnC,OAAO,IAAIjC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtCX,EAAE,CAACY,WAAW,CAAC,UAACC,EAAE,EAAK;MACrBA,EAAE,CAACC,UAAU,CACX,8BAA8B,EAC9B,EAAE,EACF,UAACC,CAAC,EAAA4B,KAAA;QAAA,IAAY1B,MAAM,GAAA0B,KAAA,CAAdzB,IAAI,CAAID,MAAM;QAAA,OAASP,OAAO,CAACO,MAAM,CAAC;MAAA,GAC5C,UAACF,CAAC,EAAEK,KAAK;QAAA,OAAKT,MAAM,CAACS,KAAK,CAAC;MAAA,CAC7B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,eAAepB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}