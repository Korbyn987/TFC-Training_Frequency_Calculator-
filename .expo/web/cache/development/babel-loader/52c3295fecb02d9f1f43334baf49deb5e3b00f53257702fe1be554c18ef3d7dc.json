{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/screens/RecoveryGuideScreen.js\",\n  _this = this;\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector } from \"react-redux\";\nimport { styles } from \"../styles/recoveryGuideStyles\";\nimport CircularProgress from 'react-native-circular-progress-indicator';\nvar MUSCLE_RECOVERY_TIMES = {\n  Biceps: 48,\n  Triceps: 72,\n  Forearms: 48,\n  Chest: 72,\n  \"Deltoid (front)\": 48,\n  \"Deltoid (side)\": 48,\n  \"Deltoid (rear)\": 48,\n  \"Upper/Middle Back\": 72,\n  \"Lower Back\": 62,\n  Trapezius: 72,\n  Glutes: 62,\n  Calves: 48,\n  Quadriceps: 72,\n  Hamstrings: 72,\n  Core: 48\n};\nvar calculateRecovery = function calculateRecovery(lastWorkout, recoveryTime) {\n  if (!lastWorkout) return {\n    percentage: 100,\n    timeLeft: 0\n  };\n  var now = new Date();\n  var workoutDate = new Date(lastWorkout);\n  var hoursPassed = (now - workoutDate) / (1000 * 60 * 60);\n  var timeLeft = recoveryTime - hoursPassed;\n  var recoveryPercentage = Math.min(hoursPassed / recoveryTime * 100, 100);\n  return {\n    percentage: recoveryPercentage,\n    timeLeft: timeLeft > 0 ? timeLeft : 0,\n    hoursPassed: hoursPassed\n  };\n};\nvar MuscleRecoveryMeter = function MuscleRecoveryMeter(_ref) {\n  var muscleName = _ref.muscleName,\n    lastWorkout = _ref.lastWorkout,\n    recoveryTime = _ref.recoveryTime;\n  var _calculateRecovery = calculateRecovery(lastWorkout, recoveryTime),\n    percentage = _calculateRecovery.percentage,\n    timeLeft = _calculateRecovery.timeLeft;\n  var getGradientColor = function getGradientColor(percent) {\n    if (percent <= 33) return '#553c9a';\n    if (percent <= 66) return '#805ad5';\n    return '#9f7aea';\n  };\n  return React.createElement(View, {\n    style: styles.muscleCard,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.muscleName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, muscleName), React.createElement(View, {\n    style: styles.progressContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(CircularProgress, {\n    value: percentage,\n    radius: 30,\n    duration: 1000,\n    progressValueColor: '#2d3748',\n    maxValue: 100,\n    title: '%',\n    titleColor: '#2d3748',\n    titleStyle: {\n      fontWeight: 'bold'\n    },\n    activeStrokeColor: getGradientColor(percentage),\n    inActiveStrokeColor: '#e2e8f0',\n    inActiveStrokeOpacity: 0.5,\n    inActiveStrokeWidth: 6,\n    activeStrokeWidth: 12,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })), React.createElement(Text, {\n    style: styles.recoveryText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, timeLeft > 0 ? `${Math.ceil(timeLeft)}h until fully recovered` : 'Fully Recovered'));\n};\nvar RecoveryGuideScreen = function RecoveryGuideScreen() {\n  var workouts = useSelector(function (state) {\n    var _state$workouts;\n    return (_state$workouts = state.workouts) == null ? void 0 : _state$workouts.workouts;\n  }) || {};\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Recovery Guide\"), React.createElement(Text, {\n    style: styles.subtitle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Track your muscle recovery status\")), React.createElement(View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, Object.entries(MUSCLE_RECOVERY_TIMES).map(function (_ref2) {\n    var _workouts$muscle;\n    var _ref3 = _slicedToArray(_ref2, 2),\n      muscle = _ref3[0],\n      recoveryTime = _ref3[1];\n    return React.createElement(MuscleRecoveryMeter, {\n      key: muscle,\n      muscleName: muscle,\n      lastWorkout: (_workouts$muscle = workouts[muscle]) == null ? void 0 : _workouts$muscle.lastWorkout,\n      recoveryTime: recoveryTime,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    });\n  })));\n};\nexport default RecoveryGuideScreen;","map":{"version":3,"names":["React","View","Text","ScrollView","TouchableOpacity","useSelector","styles","CircularProgress","MUSCLE_RECOVERY_TIMES","Biceps","Triceps","Forearms","Chest","Trapezius","Glutes","Calves","Quadriceps","Hamstrings","Core","calculateRecovery","lastWorkout","recoveryTime","percentage","timeLeft","now","Date","workoutDate","hoursPassed","recoveryPercentage","Math","min","MuscleRecoveryMeter","_ref","muscleName","_calculateRecovery","getGradientColor","percent","createElement","style","muscleCard","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","progressContainer","value","radius","duration","progressValueColor","maxValue","title","titleColor","titleStyle","fontWeight","activeStrokeColor","inActiveStrokeColor","inActiveStrokeOpacity","inActiveStrokeWidth","activeStrokeWidth","recoveryText","ceil","RecoveryGuideScreen","workouts","state","_state$workouts","container","header","subtitle","content","Object","entries","map","_ref2","_workouts$muscle","_ref3","_slicedToArray","muscle","key"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/screens/RecoveryGuideScreen.js"],"sourcesContent":["import React from \"react\";\nimport { View, Text, ScrollView, TouchableOpacity } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { styles } from \"../styles/recoveryGuideStyles\";\nimport CircularProgress from 'react-native-circular-progress-indicator';\n\nconst MUSCLE_RECOVERY_TIMES = {\n  Biceps: 48,\n  Triceps: 72,\n  Forearms: 48,\n  Chest: 72,\n  \"Deltoid (front)\": 48,\n  \"Deltoid (side)\": 48,\n  \"Deltoid (rear)\": 48,\n  \"Upper/Middle Back\": 72,\n  \"Lower Back\": 62,\n  Trapezius: 72,\n  Glutes: 62,\n  Calves: 48,\n  Quadriceps: 72,\n  Hamstrings: 72,\n  Core: 48,\n};\n\nconst calculateRecovery = (lastWorkout, recoveryTime) => {\n  if (!lastWorkout) return { percentage: 100, timeLeft: 0 };\n\n  const now = new Date();\n  const workoutDate = new Date(lastWorkout);\n  const hoursPassed = (now - workoutDate) / (1000 * 60 * 60);\n  const timeLeft = recoveryTime - hoursPassed;\n  const recoveryPercentage = Math.min((hoursPassed / recoveryTime) * 100, 100);\n  \n  return {\n    percentage: recoveryPercentage,\n    timeLeft: timeLeft > 0 ? timeLeft : 0,\n    hoursPassed,\n  };\n};\n\nconst MuscleRecoveryMeter = ({ muscleName, lastWorkout, recoveryTime }) => {\n  const { percentage, timeLeft } = calculateRecovery(lastWorkout, recoveryTime);\n\n  const getGradientColor = (percent) => {\n    if (percent <= 33) return '#553c9a';\n    if (percent <= 66) return '#805ad5';\n    return '#9f7aea';\n  };\n\n  return (\n    <View style={styles.muscleCard}>\n      <Text style={styles.muscleName}>{muscleName}</Text>\n      <View style={styles.progressContainer}>\n        <CircularProgress\n          value={percentage}\n          radius={30}\n          duration={1000}\n          progressValueColor={'#2d3748'}\n          maxValue={100}\n          title={'%'}\n          titleColor={'#2d3748'}\n          titleStyle={{ fontWeight: 'bold' }}\n          activeStrokeColor={getGradientColor(percentage)}\n          inActiveStrokeColor={'#e2e8f0'}\n          inActiveStrokeOpacity={0.5}\n          inActiveStrokeWidth={6}\n          activeStrokeWidth={12}\n        />\n      </View>\n      <Text style={styles.recoveryText}>\n        {timeLeft > 0\n          ? `${Math.ceil(timeLeft)}h until fully recovered`\n          : 'Fully Recovered'}\n      </Text>\n    </View>\n  );\n};\n\nconst RecoveryGuideScreen = () => {\n  const workouts = useSelector((state) => state.workouts?.workouts) || {};\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Recovery Guide</Text>\n        <Text style={styles.subtitle}>Track your muscle recovery status</Text>\n      </View>\n\n      <View style={styles.content}>\n        {Object.entries(MUSCLE_RECOVERY_TIMES).map(([muscle, recoveryTime]) => (\n          <MuscleRecoveryMeter\n            key={muscle}\n            muscleName={muscle}\n            lastWorkout={workouts[muscle]?.lastWorkout}\n            recoveryTime={recoveryTime}\n          />\n        ))}\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default RecoveryGuideScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}