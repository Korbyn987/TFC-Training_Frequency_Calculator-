{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\adamh\\\\OneDrive - University of Central Missouri\\\\Desktop\\\\TFC\\\\TFC-Training_Frequency_Calculator-\\\\src\\\\screens\\\\ResetPasswordScreen.js\",\n  _this = this;\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useDispatch } from 'react-redux';\nimport { resetPassword } from \"../services/authService\";\nimport { setRecoveryStatus, setRecoveryError } from \"../redux/authSlice\";\nimport ButtonStyles from \"../styles/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ResetPasswordScreen = function ResetPasswordScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    newPassword = _useState2[0],\n    setNewPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmPassword = _useState4[0],\n    setConfirmPassword = _useState4[1];\n  var dispatch = useDispatch();\n  var _ref2 = route.params || {},\n    token = _ref2.token;\n  var handleResetPassword = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!newPassword || !confirmPassword) {\n        Alert.alert('Error', 'Please fill in all fields');\n        return;\n      }\n      if (newPassword !== confirmPassword) {\n        Alert.alert('Error', 'Passwords do not match');\n        return;\n      }\n      if (newPassword.length < 8) {\n        Alert.alert('Error', 'Password must be at least 8 characters long');\n        return;\n      }\n      try {\n        yield resetPassword(token, newPassword);\n        dispatch(setRecoveryStatus('Password successfully reset'));\n        navigation.replace('Login');\n      } catch (error) {\n        dispatch(setRecoveryError(error.toString()));\n      }\n    });\n    return function handleResetPassword() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: _jsxDEV(View, {\n      style: styles.box,\n      children: [_jsxDEV(Text, {\n        style: styles.title,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, _this), _jsxDEV(TextInput, {\n        style: styles.input,\n        placeholder: \"New Password\",\n        value: newPassword,\n        onChangeText: setNewPassword,\n        secureTextEntry: true,\n        autoCapitalize: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, _this), _jsxDEV(TextInput, {\n        style: styles.input,\n        placeholder: \"Confirm New Password\",\n        value: confirmPassword,\n        onChangeText: setConfirmPassword,\n        secureTextEntry: true,\n        autoCapitalize: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, _this), _jsxDEV(TouchableOpacity, {\n        style: ButtonStyles.button,\n        onPress: handleResetPassword,\n        children: _jsxDEV(Text, {\n          style: ButtonStyles.text,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, _this), _jsxDEV(TouchableOpacity, {\n        style: [ButtonStyles.outlineButton, styles.backButton],\n        onPress: function onPress() {\n          return navigation.replace('Login');\n        },\n        children: _jsxDEV(Text, {\n          style: ButtonStyles.outlineText,\n          children: \"Back to Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, _this);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  box: {\n    width: '90%',\n    maxWidth: 400,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n    color: '#333'\n  },\n  input: {\n    width: '100%',\n    height: 50,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 5,\n    marginBottom: 15,\n    paddingHorizontal: 15,\n    fontSize: 16\n  },\n  backButton: {\n    marginTop: 10\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","StyleSheet","Alert","TouchableOpacity","useDispatch","resetPassword","setRecoveryStatus","setRecoveryError","ButtonStyles","jsxDEV","_jsxDEV","ResetPasswordScreen","_ref","route","navigation","_useState","_useState2","_slicedToArray","newPassword","setNewPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","dispatch","_ref2","params","token","handleResetPassword","_ref3","_asyncToGenerator","alert","length","replace","error","toString","apply","arguments","style","styles","container","children","box","title","fileName","_jsxFileName","lineNumber","columnNumber","_this","input","placeholder","value","onChangeText","secureTextEntry","autoCapitalize","button","onPress","text","outlineButton","backButton","outlineText","create","flex","padding","backgroundColor","justifyContent","alignItems","width","maxWidth","borderRadius","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","fontSize","fontWeight","marginBottom","textAlign","color","borderWidth","borderColor","paddingHorizontal","marginTop"],"sources":["C:/Users/adamh/OneDrive - University of Central Missouri/Desktop/TFC/TFC-Training_Frequency_Calculator-/src/screens/ResetPasswordScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, Alert, TouchableOpacity } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { resetPassword } from '../services/authService';\nimport { setRecoveryStatus, setRecoveryError } from '../redux/authSlice';\nimport ButtonStyles from '../styles/Button';\n\nconst ResetPasswordScreen = ({ route, navigation }) => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const dispatch = useDispatch();\n  const { token } = route.params || {};\n\n  const handleResetPassword = async () => {\n    if (!newPassword || !confirmPassword) {\n      Alert.alert('Error', 'Please fill in all fields');\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      Alert.alert('Error', 'Passwords do not match');\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      Alert.alert('Error', 'Password must be at least 8 characters long');\n      return;\n    }\n\n    try {\n      await resetPassword(token, newPassword);\n      dispatch(setRecoveryStatus('Password successfully reset'));\n      navigation.replace('Login');\n    } catch (error) {\n      dispatch(setRecoveryError(error.toString()));\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.title}>Reset Password</Text>\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"New Password\"\n          value={newPassword}\n          onChangeText={setNewPassword}\n          secureTextEntry\n          autoCapitalize=\"none\"\n        />\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"Confirm New Password\"\n          value={confirmPassword}\n          onChangeText={setConfirmPassword}\n          secureTextEntry\n          autoCapitalize=\"none\"\n        />\n\n        <TouchableOpacity\n          style={ButtonStyles.button}\n          onPress={handleResetPassword}\n        >\n          <Text style={ButtonStyles.text}>Reset Password</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[ButtonStyles.outlineButton, styles.backButton]}\n          onPress={() => navigation.replace('Login')}\n        >\n          <Text style={ButtonStyles.outlineText}>Back to Login</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  box: {\n    width: '90%',\n    maxWidth: 400,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center',\n    color: '#333',\n  },\n  input: {\n    width: '100%',\n    height: 50,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 5,\n    marginBottom: 15,\n    paddingHorizontal: 15,\n    fontSize: 16,\n  },\n  backButton: {\n    marginTop: 10,\n  },\n});\n\nexport default ResetPasswordScreen;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAExC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa;AACtB,SAASC,iBAAiB,EAAEC,gBAAgB;AAC5C,OAAOC,YAAY;AAAyB,SAAAC,MAAA,IAAAC,OAAA;AAE5C,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAAC,IAAA,EAA8B;EAAA,IAAxBC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EAC9C,IAAAC,SAAA,GAAsClB,QAAQ,CAAC,EAAE,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAA8CvB,QAAQ,CAAC,EAAE,CAAC;IAAAwB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAC1C,IAAMG,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAC9B,IAAAqB,KAAA,GAAkBZ,KAAK,CAACa,MAAM,IAAI,CAAC,CAAC;IAA5BC,KAAK,GAAAF,KAAA,CAALE,KAAK;EAEb,IAAMC,mBAAmB;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MACtC,IAAI,CAACZ,WAAW,IAAI,CAACI,eAAe,EAAE;QACpCpB,KAAK,CAAC6B,KAAK,CAAC,OAAO,EAAE,2BAA2B,CAAC;QACjD;MACF;MAEA,IAAIb,WAAW,KAAKI,eAAe,EAAE;QACnCpB,KAAK,CAAC6B,KAAK,CAAC,OAAO,EAAE,wBAAwB,CAAC;QAC9C;MACF;MAEA,IAAIb,WAAW,CAACc,MAAM,GAAG,CAAC,EAAE;QAC1B9B,KAAK,CAAC6B,KAAK,CAAC,OAAO,EAAE,6CAA6C,CAAC;QACnE;MACF;MAEA,IAAI;QACF,MAAM1B,aAAa,CAACsB,KAAK,EAAET,WAAW,CAAC;QACvCM,QAAQ,CAAClB,iBAAiB,CAAC,6BAA6B,CAAC,CAAC;QAC1DQ,UAAU,CAACmB,OAAO,CAAC,OAAO,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdV,QAAQ,CAACjB,gBAAgB,CAAC2B,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC;IAAA,gBAvBKP,mBAAmBA,CAAA;MAAA,OAAAC,KAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;EAAA,GAuBxB;EAED,OACE3B,OAAA,CAACZ,IAAI;IAACwC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC5B/B,OAAA,CAACZ,IAAI;MAACwC,KAAK,EAAEC,MAAM,CAACG,GAAI;MAAAD,QAAA,GACtB/B,OAAA,CAACX,IAAI;QAACuC,KAAK,EAAEC,MAAM,CAACI,KAAM;QAAAF,QAAA,EAAC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAM,CAAC,EAEhDtC,OAAA,CAACV,SAAS;QACRsC,KAAK,EAAEC,MAAM,CAACU,KAAM;QACpBC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAEjC,WAAY;QACnBkC,YAAY,EAAEjC,cAAe;QAC7BkC,eAAe;QACfC,cAAc,EAAC;MAAM;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KACtB,CAAC,EAEFtC,OAAA,CAACV,SAAS;QACRsC,KAAK,EAAEC,MAAM,CAACU,KAAM;QACpBC,WAAW,EAAC,sBAAsB;QAClCC,KAAK,EAAE7B,eAAgB;QACvB8B,YAAY,EAAE7B,kBAAmB;QACjC8B,eAAe;QACfC,cAAc,EAAC;MAAM;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KACtB,CAAC,EAEFtC,OAAA,CAACP,gBAAgB;QACfmC,KAAK,EAAE9B,YAAY,CAAC+C,MAAO;QAC3BC,OAAO,EAAE5B,mBAAoB;QAAAa,QAAA,EAE7B/B,OAAA,CAACX,IAAI;UAACuC,KAAK,EAAE9B,YAAY,CAACiD,IAAK;UAAAhB,QAAA,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAM;MAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KACrC,CAAC,EAEnBtC,OAAA,CAACP,gBAAgB;QACfmC,KAAK,EAAE,CAAC9B,YAAY,CAACkD,aAAa,EAAEnB,MAAM,CAACoB,UAAU,CAAE;QACvDH,OAAO,EAAE,SAATA,OAAOA,CAAA;UAAA,OAAQ1C,UAAU,CAACmB,OAAO,CAAC,OAAO,CAAC;QAAA,CAAC;QAAAQ,QAAA,EAE3C/B,OAAA,CAACX,IAAI;UAACuC,KAAK,EAAE9B,YAAY,CAACoD,WAAY;UAAAnB,QAAA,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAM;MAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAC3C,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KACf;EAAC;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACH,CAAC;AAEX,CAAC;AAED,IAAMT,MAAM,GAAGtC,UAAU,CAAC4D,MAAM,CAAC;EAC/BrB,SAAS,EAAE;IACTsB,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE,SAAS;IAC1BC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDxB,GAAG,EAAE;IACHyB,KAAK,EAAE,KAAK;IACZC,QAAQ,EAAE,GAAG;IACbJ,eAAe,EAAE,OAAO;IACxBK,YAAY,EAAE,EAAE;IAChBN,OAAO,EAAE,EAAE;IACXO,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZJ,KAAK,EAAE,CAAC;MACRK,MAAM,EAAE;IACV,CAAC;IACDC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE;EACb,CAAC;EACDhC,KAAK,EAAE;IACLiC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,QAAQ;IACnBC,KAAK,EAAE;EACT,CAAC;EACD/B,KAAK,EAAE;IACLkB,KAAK,EAAE,MAAM;IACbK,MAAM,EAAE,EAAE;IACVS,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBb,YAAY,EAAE,CAAC;IACfS,YAAY,EAAE,EAAE;IAChBK,iBAAiB,EAAE,EAAE;IACrBP,QAAQ,EAAE;EACZ,CAAC;EACDjB,UAAU,EAAE;IACVyB,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAezE,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}