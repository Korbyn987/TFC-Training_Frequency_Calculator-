{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nimport { createSlice } from '@reduxjs/toolkit';\nvar getMuscleKey = function getMuscleKey(muscleName) {\n  var map = {\n    'Chest': 'chest',\n    'Bicep': 'biceps',\n    'Tricep': 'triceps',\n    'Back': 'back',\n    'Shoulders': 'shoulders',\n    'Legs': 'quads',\n    'Core': 'abs'\n  };\n  return map[muscleName] || muscleName.toLowerCase();\n};\nvar initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    back: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    shoulders: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    biceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    triceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    forearms: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    abs: {\n      lastWorkout: null,\n      recoveryTime: 24\n    },\n    traps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    quads: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    hamstrings: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    calves: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    glutes: {\n      lastWorkout: null,\n      recoveryTime: 72\n    }\n  }\n};\nvar workoutSlice = createSlice({\n  name: 'workout',\n  initialState: initialState,\n  reducers: {\n    addWorkout: function addWorkout(state, action) {\n      var _action$payload = action.payload,\n        date = _action$payload.date,\n        muscles = _action$payload.muscles,\n        intensity = _action$payload.intensity;\n      var newWorkout = {\n        date: date,\n        muscles: muscles,\n        intensity: intensity,\n        id: Date.now().toString()\n      };\n      state.workouts.push(newWorkout);\n      muscles.forEach(function (muscleName) {\n        var muscleKey = getMuscleKey(muscleName);\n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48\n          };\n        }\n      });\n      try {\n        var serializedState = JSON.stringify(state);\n        AsyncStorage.setItem('workoutState', serializedState);\n      } catch (error) {\n        console.error('Error saving workout state:', error);\n      }\n    },\n    loadWorkouts: function loadWorkouts(state, action) {\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    },\n    clearWorkouts: function clearWorkouts(state) {\n      return initialState;\n    }\n  }\n});\nexport var loadWorkoutsFromStorage = function loadWorkoutsFromStorage() {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch) {\n      try {\n        var serializedState = yield AsyncStorage.getItem('workoutState');\n        if (serializedState !== null) {\n          var parsedState = JSON.parse(serializedState);\n          dispatch(loadWorkouts(parsedState));\n        }\n      } catch (error) {\n        console.error('Error loading workouts from storage:', error);\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nvar _workoutSlice$actions = workoutSlice.actions,\n  addWorkout = _workoutSlice$actions.addWorkout,\n  loadWorkouts = _workoutSlice$actions.loadWorkouts,\n  clearWorkouts = _workoutSlice$actions.clearWorkouts;\nexport { addWorkout, loadWorkouts, clearWorkouts };\nexport default workoutSlice.reducer;","map":{"version":3,"names":["createSlice","getMuscleKey","muscleName","map","toLowerCase","initialState","workouts","muscleStatus","chest","lastWorkout","recoveryTime","back","shoulders","biceps","triceps","forearms","abs","traps","quads","hamstrings","calves","glutes","workoutSlice","name","reducers","addWorkout","state","action","_action$payload","payload","date","muscles","intensity","newWorkout","id","Date","now","toString","push","forEach","muscleKey","serializedState","JSON","stringify","AsyncStorage","setItem","error","console","loadWorkouts","_objectSpread","clearWorkouts","loadWorkoutsFromStorage","_ref","_asyncToGenerator","dispatch","getItem","parsedState","parse","_x","apply","arguments","_workoutSlice$actions","actions","reducer"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/redux/workoutSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Helper function to get muscle group key from display name\nconst getMuscleKey = (muscleName) => {\n  const map = {\n    'Chest': 'chest',\n    'Bicep': 'biceps',\n    'Tricep': 'triceps',\n    'Back': 'back',\n    'Shoulders': 'shoulders',\n    'Legs': 'quads', // Map legs to quads for simplicity\n    'Core': 'abs'\n  };\n  return map[muscleName] || muscleName.toLowerCase();\n};\n\nconst initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: { lastWorkout: null, recoveryTime: 72 },\n    back: { lastWorkout: null, recoveryTime: 72 },\n    shoulders: { lastWorkout: null, recoveryTime: 48 },\n    biceps: { lastWorkout: null, recoveryTime: 48 },\n    triceps: { lastWorkout: null, recoveryTime: 48 },\n    forearms: { lastWorkout: null, recoveryTime: 48 },\n    abs: { lastWorkout: null, recoveryTime: 24 },\n    traps: { lastWorkout: null, recoveryTime: 48 },\n    quads: { lastWorkout: null, recoveryTime: 72 },\n    hamstrings: { lastWorkout: null, recoveryTime: 72 },\n    calves: { lastWorkout: null, recoveryTime: 48 },\n    glutes: { lastWorkout: null, recoveryTime: 72 }\n  }\n};\n\nconst workoutSlice = createSlice({\n  name: 'workout',\n  initialState,\n  reducers: {\n    addWorkout: (state, action) => {\n      const { date, muscles, intensity } = action.payload;\n      \n      // Add the workout to history\n      const newWorkout = {\n        date,\n        muscles,\n        intensity,\n        id: Date.now().toString()\n      };\n      \n      state.workouts.push(newWorkout);\n      \n      // Update last workout date for each muscle group\n      muscles.forEach(muscleName => {\n        const muscleKey = getMuscleKey(muscleName);\n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          // If muscle doesn't exist in state, add it with default recovery time\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48 // Default recovery time in hours\n          };\n        }\n      });\n      \n      // Save to AsyncStorage\n      try {\n        const serializedState = JSON.stringify(state);\n        AsyncStorage.setItem('workoutState', serializedState);\n      } catch (error) {\n        console.error('Error saving workout state:', error);\n      }\n    },\n    loadWorkouts: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n    clearWorkouts: (state) => {\n      return initialState;\n    }\n  }\n});\n\n// Load workouts from AsyncStorage on app start\nexport const loadWorkoutsFromStorage = () => async (dispatch) => {\n  try {\n    const serializedState = await AsyncStorage.getItem('workoutState');\n    if (serializedState !== null) {\n      const parsedState = JSON.parse(serializedState);\n      dispatch(loadWorkouts(parsedState));\n    }\n  } catch (error) {\n    console.error('Error loading workouts from storage:', error);\n  }\n};\n\nexport const { addWorkout, loadWorkouts, clearWorkouts } = workoutSlice.actions;\nexport default workoutSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}