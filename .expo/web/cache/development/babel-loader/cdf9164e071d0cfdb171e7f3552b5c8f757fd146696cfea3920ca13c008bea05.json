{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar API_URL = Platform.select({\n  ios: \"http://localhost:5001\",\n  android: \"http://10.0.2.2:5001\",\n  default: \"http://localhost:5001\"\n});\nexport var forgotPassword = function () {\n  var _ref = _asyncToGenerator(function* (email) {\n    try {\n      var response = yield fetch(`${API_URL}/api/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to send password reset email');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function forgotPassword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var resetPassword = function () {\n  var _ref2 = _asyncToGenerator(function* (token, newPassword) {\n    try {\n      var response = yield fetch(`${API_URL}/api/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: token,\n          newPassword: newPassword\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to reset password');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function resetPassword(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var recoverUsername = function () {\n  var _ref3 = _asyncToGenerator(function* (email) {\n    try {\n      var response = yield fetch(`${API_URL}/api/auth/recover-username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to recover username');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function recoverUsername(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["API_URL","Platform","select","ios","android","default","forgotPassword","_ref","_asyncToGenerator","email","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","message","_x","apply","arguments","resetPassword","_ref2","token","newPassword","_x2","_x3","recoverUsername","_ref3","_x4"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/services/authService.js"],"sourcesContent":["import { Platform } from 'react-native';\n\n// Use different URLs based on platform\nconst API_URL = Platform.select({\n  ios: \"http://localhost:5001\", // iOS simulator\n  android: \"http://10.0.2.2:5001\", // Android emulator\n  default: \"http://localhost:5001\", // Web\n});\n\nexport const forgotPassword = async (email) => {\n  try {\n    const response = await fetch(`${API_URL}/api/auth/forgot-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to send password reset email');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const response = await fetch(`${API_URL}/api/auth/reset-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token, newPassword }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to reset password');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n\nexport const recoverUsername = async (email) => {\n  try {\n    const response = await fetch(`${API_URL}/api/auth/recover-username`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to recover username');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}