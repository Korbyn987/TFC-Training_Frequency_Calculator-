{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/screens/ResetPasswordScreen.js\",\n  _this = this;\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { authService } from \"../services/authService\";\nimport ButtonStyles from \"../styles/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ResetPasswordScreen = function ResetPasswordScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    newPassword = _useState2[0],\n    setNewPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    confirmPassword = _useState4[0],\n    setConfirmPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    success = _useState8[0],\n    setSuccess = _useState8[1];\n  var navigation = useNavigation();\n  useEffect(function () {\n    var params = new URLSearchParams(window.location.search);\n    var token = params.get('token');\n    if (!token) {\n      setError('Invalid reset link. Please request a new password reset.');\n      setTimeout(function () {\n        navigation.navigate('Login');\n      }, 3000);\n    }\n  }, [navigation]);\n  var handleSubmit = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        setError('');\n        var params = new URLSearchParams(window.location.search);\n        var token = params.get('token');\n        if (!token) {\n          setError('Invalid reset link. Please request a new password reset.');\n          return;\n        }\n        if (!newPassword || !confirmPassword) {\n          setError('Please fill in all fields');\n          return;\n        }\n        if (newPassword !== confirmPassword) {\n          setError('Passwords do not match');\n          return;\n        }\n        if (newPassword.length < 8) {\n          setError('Password must be at least 8 characters long');\n          return;\n        }\n        var response = yield authService.resetPassword(token, newPassword);\n        if (response.success) {\n          setSuccess(true);\n          setTimeout(function () {\n            navigation.navigate('Login');\n          }, 2000);\n        } else {\n          setError(response.error || 'Failed to reset password');\n        }\n      } catch (err) {\n        setError('An error occurred. Please try again.');\n      }\n    });\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, _this), error ? _jsxDEV(Text, {\n      style: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, _this) : null, success ? _jsxDEV(Text, {\n      style: styles.success,\n      children: \"Password reset successful! Redirecting to login...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, _this) : null, _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"New Password\",\n      secureTextEntry: true,\n      value: newPassword,\n      onChangeText: setNewPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirm New Password\",\n      secureTextEntry: true,\n      value: confirmPassword,\n      onChangeText: setConfirmPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, _this), _jsxDEV(TouchableOpacity, {\n      style: [ButtonStyles.button, success ? styles.disabledButton : null],\n      onPress: handleSubmit,\n      disabled: success,\n      children: _jsxDEV(Text, {\n        style: ButtonStyles.buttonText,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, _this);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#171923',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    color: '#fff'\n  },\n  input: {\n    width: '100%',\n    maxWidth: 300,\n    height: 40,\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    marginBottom: 10,\n    paddingHorizontal: 10\n  },\n  error: {\n    color: '#fc8181',\n    marginBottom: 10,\n    textAlign: 'center'\n  },\n  success: {\n    color: '#68d391',\n    marginBottom: 10,\n    textAlign: 'center'\n  },\n  disabledButton: {\n    opacity: 0.5\n  }\n});\nexport default ResetPasswordScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","useNavigation","useRoute","authService","ButtonStyles","jsxDEV","_jsxDEV","ResetPasswordScreen","_useState","_useState2","_slicedToArray","newPassword","setNewPassword","_useState3","_useState4","confirmPassword","setConfirmPassword","_useState5","_useState6","error","setError","_useState7","_useState8","success","setSuccess","navigation","params","URLSearchParams","window","location","search","token","get","setTimeout","navigate","handleSubmit","_ref","_asyncToGenerator","length","response","resetPassword","err","apply","arguments","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_this","input","placeholder","secureTextEntry","value","onChangeText","button","disabledButton","onPress","disabled","buttonText","create","flex","padding","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","marginBottom","color","width","maxWidth","height","borderRadius","paddingHorizontal","textAlign","opacity"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/screens/ResetPasswordScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { authService } from '../services/authService';\nimport ButtonStyles from '../styles/Button';\n\nconst ResetPasswordScreen = () => {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const navigation = useNavigation();\n\n  // Get token from URL query parameters\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const token = params.get('token');\n    if (!token) {\n      setError('Invalid reset link. Please request a new password reset.');\n      setTimeout(() => {\n        navigation.navigate('Login');\n      }, 3000);\n    }\n  }, [navigation]);\n\n  const handleSubmit = async () => {\n    try {\n      setError('');\n\n      // Get token from URL\n      const params = new URLSearchParams(window.location.search);\n      const token = params.get('token');\n\n      if (!token) {\n        setError('Invalid reset link. Please request a new password reset.');\n        return;\n      }\n\n      // Validate inputs\n      if (!newPassword || !confirmPassword) {\n        setError('Please fill in all fields');\n        return;\n      }\n\n      if (newPassword !== confirmPassword) {\n        setError('Passwords do not match');\n        return;\n      }\n\n      if (newPassword.length < 8) {\n        setError('Password must be at least 8 characters long');\n        return;\n      }\n\n      // Call API to reset password\n      const response = await authService.resetPassword(token, newPassword);\n      \n      if (response.success) {\n        setSuccess(true);\n        setTimeout(() => {\n          navigation.navigate('Login');\n        }, 2000);\n      } else {\n        setError(response.error || 'Failed to reset password');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Reset Password</Text>\n      \n      {error ? <Text style={styles.error}>{error}</Text> : null}\n      {success ? <Text style={styles.success}>Password reset successful! Redirecting to login...</Text> : null}\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"New Password\"\n        secureTextEntry\n        value={newPassword}\n        onChangeText={setNewPassword}\n      />\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Confirm New Password\"\n        secureTextEntry\n        value={confirmPassword}\n        onChangeText={setConfirmPassword}\n      />\n\n      <TouchableOpacity \n        style={[ButtonStyles.button, success ? styles.disabledButton : null]}\n        onPress={handleSubmit}\n        disabled={success}\n      >\n        <Text style={ButtonStyles.buttonText}>Reset Password</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#171923',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    color: '#fff',\n  },\n  input: {\n    width: '100%',\n    maxWidth: 300,\n    height: 40,\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    marginBottom: 10,\n    paddingHorizontal: 10,\n  },\n  error: {\n    color: '#fc8181',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  success: {\n    color: '#68d391',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n});\n\nexport default ResetPasswordScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}