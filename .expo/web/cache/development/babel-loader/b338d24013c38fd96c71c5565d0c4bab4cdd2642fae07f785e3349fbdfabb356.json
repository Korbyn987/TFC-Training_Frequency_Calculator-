{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { fetch } from 'node-fetch';\nvar API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nexport var forgotPassword = function () {\n  var _ref = _asyncToGenerator(function* (email) {\n    try {\n      var response = yield fetch(`${API_URL}/auth/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to send password reset email');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function forgotPassword(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var resetPassword = function () {\n  var _ref2 = _asyncToGenerator(function* (token, newPassword) {\n    try {\n      var response = yield fetch(`${API_URL}/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: token,\n          newPassword: newPassword\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to reset password');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function resetPassword(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var recoverUsername = function () {\n  var _ref3 = _asyncToGenerator(function* (email) {\n    try {\n      var response = yield fetch(`${API_URL}/auth/recover-username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      var data = yield response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to recover username');\n      }\n      return data;\n    } catch (error) {\n      throw error.message || error;\n    }\n  });\n  return function recoverUsername(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["fetch","API_URL","process","env","REACT_APP_API_URL","forgotPassword","_ref","_asyncToGenerator","email","response","method","headers","body","JSON","stringify","data","json","ok","Error","error","message","_x","apply","arguments","resetPassword","_ref2","token","newPassword","_x2","_x3","recoverUsername","_ref3","_x4"],"sources":["C:/Users/adamh/OneDrive - University of Central Missouri/Desktop/TFC/TFC-Training_Frequency_Calculator-/src/services/authService.js"],"sourcesContent":["import { fetch } from 'node-fetch';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\nexport const forgotPassword = async (email) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/forgot-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to send password reset email');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n\nexport const resetPassword = async (token, newPassword) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/reset-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token, newPassword }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to reset password');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n\nexport const recoverUsername = async (email) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/recover-username`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to recover username');\n    }\n    return data;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}