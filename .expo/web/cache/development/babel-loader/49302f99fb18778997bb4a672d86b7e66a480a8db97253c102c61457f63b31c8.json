{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"libSQLOptions\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport function flattenOpenOptions(options) {\n  var libSQLOptions = options.libSQLOptions,\n    restOptions = _objectWithoutProperties(options, _excluded);\n  var result = _objectSpread({}, restOptions);\n  if (libSQLOptions) {\n    Object.assign(result, {\n      libSQLUrl: libSQLOptions.url,\n      libSQLAuthToken: libSQLOptions.authToken,\n      libSQLRemoteOnly: libSQLOptions.remoteOnly\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["flattenOpenOptions","options","libSQLOptions","restOptions","_objectWithoutProperties","_excluded","result","_objectSpread","Object","assign","libSQLUrl","url","libSQLAuthToken","authToken","libSQLRemoteOnly","remoteOnly"],"sources":["C:\\Users\\adamh\\OneDrive - University of Central Missouri\\Desktop\\TFC\\TFC-Training_Frequency_Calculator-\\node_modules\\expo-sqlite\\src\\NativeDatabase.ts"],"sourcesContent":["import { NativeStatement } from './NativeStatement';\n\n/**\n * A class that represents an instance of the SQLite database.\n */\nexport declare class NativeDatabase {\n  constructor(databasePath: string, options?: SQLiteOpenOptions, serializedData?: Uint8Array);\n\n  //#region Asynchronous API\n\n  public initAsync(): Promise<void>;\n  public isInTransactionAsync(): Promise<boolean>;\n  public closeAsync(): Promise<void>;\n  public execAsync(source: string): Promise<void>;\n  public serializeAsync(databaseName: string): Promise<Uint8Array>;\n  public prepareAsync(nativeStatement: NativeStatement, source: string): Promise<NativeStatement>;\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public initSync(): void;\n  public isInTransactionSync(): boolean;\n  public closeSync(): void;\n  public execSync(source: string): void;\n  public serializeSync(databaseName: string): Uint8Array;\n  public prepareSync(nativeStatement: NativeStatement, source: string): NativeStatement;\n\n  //#endregion\n\n  public syncLibSQL(): Promise<void>;\n}\n\n/**\n * Options for opening a database.\n */\nexport interface SQLiteOpenOptions {\n  /**\n   * Whether to enable the CR-SQLite extension.\n   * @default false\n   * @deprecated CR-SQLite is no longer actively maintained. Its support is deprecated in SDK 52, and the option will be removed in SDK 53.\n   */\n  enableCRSQLite?: boolean;\n\n  /**\n   * Whether to call the [`sqlite3_update_hook()`](https://www.sqlite.org/c3ref/update_hook.html) function and enable the `onDatabaseChange` events. You can later subscribe to the change events by [`addDatabaseChangeListener`](#sqliteadddatabasechangelistenerlistener).\n   * @default false\n   */\n  enableChangeListener?: boolean;\n\n  /**\n   * Whether to create new connection even if connection with the same database name exists in cache.\n   * @default false\n   */\n  useNewConnection?: boolean;\n\n  /**\n   * Finalized unclosed statements automatically when the database is closed.\n   * @default true\n   * @hidden\n   */\n  finalizeUnusedStatementsBeforeClosing?: boolean;\n\n  /**\n   * Options for libSQL integration.\n   */\n  libSQLOptions?: {\n    /** The URL of the libSQL server. */\n    url: string;\n\n    /** The auth token for the libSQL server. */\n    authToken: string;\n\n    /**\n     * Whether to use remote-only without syncing to local database.\n     * @default false\n     */\n    remoteOnly?: boolean;\n  };\n}\n\ntype FlattenedOpenOptions = Omit<SQLiteOpenOptions, 'libSQLOptions'> & {\n  libSQLUrl?: string;\n  libSQLAuthToken?: string;\n  libSQLRemoteOnly?: boolean;\n};\n\n/**\n * Flattens the SQLiteOpenOptions that are passed to the native module.\n */\nexport function flattenOpenOptions(options: SQLiteOpenOptions): FlattenedOpenOptions {\n  const { libSQLOptions, ...restOptions } = options;\n  const result: FlattenedOpenOptions = {\n    ...restOptions,\n  };\n  if (libSQLOptions) {\n    Object.assign(result, {\n      libSQLUrl: libSQLOptions.url,\n      libSQLAuthToken: libSQLOptions.authToken,\n      libSQLRemoteOnly: libSQLOptions.remoteOnly,\n    });\n  }\n  return result;\n}\n"],"mappings":";;;;;AA0FA,OAAM,SAAUA,kBAAkBA,CAACC,OAA0B;EAC3D,IAAQC,aAAa,GAAqBD,OAAO,CAAzCC,aAAa;IAAKC,WAAW,GAAAC,wBAAA,CAAKH,OAAO,EAAAI,SAAA;EACjD,IAAMC,MAAM,GAAAC,aAAA,KACPJ,WAAW,CACf;EACD,IAAID,aAAa,EAAE;IACjBM,MAAM,CAACC,MAAM,CAACH,MAAM,EAAE;MACpBI,SAAS,EAAER,aAAa,CAACS,GAAG;MAC5BC,eAAe,EAAEV,aAAa,CAACW,SAAS;MACxCC,gBAAgB,EAAEZ,aAAa,CAACa;KACjC,CAAC;;EAEJ,OAAOT,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}