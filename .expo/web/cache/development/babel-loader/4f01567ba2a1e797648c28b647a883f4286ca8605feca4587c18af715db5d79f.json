{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar getMuscleKey = function getMuscleKey(muscleName) {\n  var map = {\n    'Chest': 'chest',\n    'Bicep': 'biceps',\n    'Tricep': 'triceps',\n    'Back': 'back',\n    'Shoulders': 'shoulders',\n    'Legs': 'quads',\n    'Core': 'abs'\n  };\n  return map[muscleName] || muscleName.toLowerCase();\n};\nvar initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    back: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    shoulders: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    biceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    triceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    forearms: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    abs: {\n      lastWorkout: null,\n      recoveryTime: 24\n    },\n    traps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    quads: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    hamstrings: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    calves: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    glutes: {\n      lastWorkout: null,\n      recoveryTime: 72\n    }\n  }\n};\nvar workoutSlice = createSlice({\n  name: 'workout',\n  initialState: initialState,\n  reducers: {\n    addWorkout: function addWorkout(state, action) {\n      var _action$payload = action.payload,\n        date = _action$payload.date,\n        muscles = _action$payload.muscles,\n        intensity = _action$payload.intensity,\n        name = _action$payload.name,\n        exercises = _action$payload.exercises;\n      console.log('Redux: Adding workout with data:', {\n        date: date,\n        muscles: muscles,\n        intensity: intensity,\n        name: name\n      });\n      var newWorkout = {\n        date: date,\n        muscles: muscles,\n        intensity: intensity,\n        name: name || 'Unnamed Workout',\n        id: Date.now().toString(),\n        exercises: exercises || []\n      };\n      state.workouts.push(newWorkout);\n      muscles.forEach(function (muscleName) {\n        var muscleKey = getMuscleKey(muscleName);\n        console.log(`Updating muscle group: ${muscleName} (key: ${muscleKey}) with workout date:`, date);\n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48\n          };\n        }\n      });\n      console.log('Updated muscle status:', state.muscleStatus);\n      console.log('Total workouts in history:', state.workouts.length);\n    },\n    clearWorkouts: function clearWorkouts(state) {\n      return initialState;\n    }\n  }\n});\nvar _workoutSlice$actions = workoutSlice.actions,\n  addWorkout = _workoutSlice$actions.addWorkout,\n  clearWorkouts = _workoutSlice$actions.clearWorkouts;\nexport { addWorkout, clearWorkouts };\nexport default workoutSlice.reducer;","map":{"version":3,"names":["createSlice","getMuscleKey","muscleName","map","toLowerCase","initialState","workouts","muscleStatus","chest","lastWorkout","recoveryTime","back","shoulders","biceps","triceps","forearms","abs","traps","quads","hamstrings","calves","glutes","workoutSlice","name","reducers","addWorkout","state","action","_action$payload","payload","date","muscles","intensity","exercises","console","log","newWorkout","id","Date","now","toString","push","forEach","muscleKey","length","clearWorkouts","_workoutSlice$actions","actions","reducer"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/redux/workoutSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Helper function to get muscle group key from display name\nconst getMuscleKey = (muscleName) => {\n  const map = {\n    'Chest': 'chest',\n    'Bicep': 'biceps',\n    'Tricep': 'triceps',\n    'Back': 'back',\n    'Shoulders': 'shoulders',\n    'Legs': 'quads', // Map legs to quads for simplicity\n    'Core': 'abs'\n  };\n  return map[muscleName] || muscleName.toLowerCase();\n};\n\nconst initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: { lastWorkout: null, recoveryTime: 72 },\n    back: { lastWorkout: null, recoveryTime: 72 },\n    shoulders: { lastWorkout: null, recoveryTime: 48 },\n    biceps: { lastWorkout: null, recoveryTime: 48 },\n    triceps: { lastWorkout: null, recoveryTime: 48 },\n    forearms: { lastWorkout: null, recoveryTime: 48 },\n    abs: { lastWorkout: null, recoveryTime: 24 },\n    traps: { lastWorkout: null, recoveryTime: 48 },\n    quads: { lastWorkout: null, recoveryTime: 72 },\n    hamstrings: { lastWorkout: null, recoveryTime: 72 },\n    calves: { lastWorkout: null, recoveryTime: 48 },\n    glutes: { lastWorkout: null, recoveryTime: 72 }\n  }\n};\n\nconst workoutSlice = createSlice({\n  name: 'workout',\n  initialState,\n  reducers: {\n    addWorkout: (state, action) => {\n      const { date, muscles, intensity, name, exercises } = action.payload;\n      \n      console.log('Redux: Adding workout with data:', { date, muscles, intensity, name });\n      \n      // Add the workout to history\n      const newWorkout = {\n        date,\n        muscles,\n        intensity,\n        name: name || 'Unnamed Workout',\n        id: Date.now().toString(),\n        exercises: exercises || []\n      };\n      \n      state.workouts.push(newWorkout);\n      \n      // Update last workout date for each muscle group\n      muscles.forEach(muscleName => {\n        // Convert display name to store key (lowercase, handle special cases)\n        const muscleKey = getMuscleKey(muscleName);\n        \n        console.log(`Updating muscle group: ${muscleName} (key: ${muscleKey}) with workout date:`, date);\n        \n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          // If muscle doesn't exist in state, add it with default recovery time\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48 // Default recovery time in hours\n          };\n        }\n      });\n      \n      console.log('Updated muscle status:', state.muscleStatus);\n      console.log('Total workouts in history:', state.workouts.length);\n    },\n    clearWorkouts: (state) => {\n      return initialState;\n    }\n  }\n});\n\nexport const { addWorkout, clearWorkouts } = workoutSlice.actions;\nexport default workoutSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}