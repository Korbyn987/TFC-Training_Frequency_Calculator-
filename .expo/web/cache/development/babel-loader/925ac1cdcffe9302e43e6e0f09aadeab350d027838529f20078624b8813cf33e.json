{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar getMuscleKey = function getMuscleKey(muscleName) {\n  var lowerName = muscleName.toLowerCase().trim();\n  var map = {\n    'chest': 'chest',\n    'biceps': 'biceps',\n    'triceps': 'triceps',\n    'back': 'back',\n    'shoulders': 'shoulders',\n    'core': 'abs',\n    'abs': 'abs',\n    'forearms': 'forearms',\n    'traps': 'traps',\n    'quads': 'quads',\n    'hamstrings': 'hamstrings',\n    'calves': 'calves',\n    'glutes': 'glutes',\n    'bicep': 'biceps',\n    'tricep': 'triceps',\n    'shoulder': 'shoulders',\n    'quad': 'quads',\n    'hamstring': 'hamstrings',\n    'calf': 'calves',\n    'glute': 'glutes',\n    'trap': 'traps',\n    'forearm': 'forearms'\n  };\n  var key = map[lowerName] || lowerName;\n  console.log(`Mapping muscle name: \"${muscleName}\" -> key: \"${key}\"`);\n  return key;\n};\nvar initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    back: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    shoulders: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    biceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    triceps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    forearms: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    abs: {\n      lastWorkout: null,\n      recoveryTime: 24\n    },\n    traps: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    quads: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    hamstrings: {\n      lastWorkout: null,\n      recoveryTime: 72\n    },\n    calves: {\n      lastWorkout: null,\n      recoveryTime: 48\n    },\n    glutes: {\n      lastWorkout: null,\n      recoveryTime: 72\n    }\n  }\n};\nvar workoutSlice = createSlice({\n  name: 'workout',\n  initialState: initialState,\n  reducers: {\n    addWorkout: function addWorkout(state, action) {\n      var _action$payload = action.payload,\n        date = _action$payload.date,\n        muscles = _action$payload.muscles,\n        intensity = _action$payload.intensity,\n        name = _action$payload.name,\n        exercises = _action$payload.exercises;\n      console.log('Redux: Adding workout with data:', {\n        date: date,\n        muscles: muscles,\n        intensity: intensity,\n        name: name\n      });\n      var newWorkout = {\n        date: date,\n        muscles: muscles,\n        intensity: intensity,\n        name: name || 'Unnamed Workout',\n        id: Date.now().toString(),\n        exercises: exercises || []\n      };\n      state.workouts.push(newWorkout);\n      muscles.forEach(function (muscleName) {\n        var muscleKey = getMuscleKey(muscleName);\n        console.log(`Updating muscle group: ${muscleName} (key: ${muscleKey}) with workout date:`, date);\n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48\n          };\n        }\n      });\n      console.log('Updated muscle status:', state.muscleStatus);\n      console.log('Total workouts in history:', state.workouts.length);\n    },\n    clearWorkouts: function clearWorkouts(state) {\n      return initialState;\n    }\n  }\n});\nvar _workoutSlice$actions = workoutSlice.actions,\n  addWorkout = _workoutSlice$actions.addWorkout,\n  clearWorkouts = _workoutSlice$actions.clearWorkouts;\nexport { addWorkout, clearWorkouts };\nexport default workoutSlice.reducer;","map":{"version":3,"names":["createSlice","getMuscleKey","muscleName","lowerName","toLowerCase","trim","map","key","console","log","initialState","workouts","muscleStatus","chest","lastWorkout","recoveryTime","back","shoulders","biceps","triceps","forearms","abs","traps","quads","hamstrings","calves","glutes","workoutSlice","name","reducers","addWorkout","state","action","_action$payload","payload","date","muscles","intensity","exercises","newWorkout","id","Date","now","toString","push","forEach","muscleKey","length","clearWorkouts","_workoutSlice$actions","actions","reducer"],"sources":["/Users/korbynirvin/Desktop/TFC(Training_Frequency_Calculator)/TFC/src/redux/workoutSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Helper function to get muscle group key from display name\nconst getMuscleKey = (muscleName) => {\n  // Convert to lowercase and handle special cases\n  const lowerName = muscleName.toLowerCase().trim();\n  \n  // Map of display names to store keys\n  const map = {\n    // Exact matches\n    'chest': 'chest',\n    'biceps': 'biceps',\n    'triceps': 'triceps',\n    'back': 'back',\n    'shoulders': 'shoulders',\n    'core': 'abs',\n    'abs': 'abs',\n    'forearms': 'forearms',\n    'traps': 'traps',\n    'quads': 'quads',\n    'hamstrings': 'hamstrings',\n    'calves': 'calves',\n    'glutes': 'glutes',\n    \n    // Common variations\n    'bicep': 'biceps',\n    'tricep': 'triceps',\n    'shoulder': 'shoulders',\n    'quad': 'quads',\n    'hamstring': 'hamstrings',\n    'calf': 'calves',\n    'glute': 'glutes',\n    'trap': 'traps',\n    'forearm': 'forearms'\n  };\n  \n  const key = map[lowerName] || lowerName;\n  console.log(`Mapping muscle name: \"${muscleName}\" -> key: \"${key}\"`);\n  return key;\n};\n\nconst initialState = {\n  workouts: [],\n  muscleStatus: {\n    chest: { lastWorkout: null, recoveryTime: 72 },\n    back: { lastWorkout: null, recoveryTime: 72 },\n    shoulders: { lastWorkout: null, recoveryTime: 48 },\n    biceps: { lastWorkout: null, recoveryTime: 48 },\n    triceps: { lastWorkout: null, recoveryTime: 48 },\n    forearms: { lastWorkout: null, recoveryTime: 48 },\n    abs: { lastWorkout: null, recoveryTime: 24 },\n    traps: { lastWorkout: null, recoveryTime: 48 },\n    quads: { lastWorkout: null, recoveryTime: 72 },\n    hamstrings: { lastWorkout: null, recoveryTime: 72 },\n    calves: { lastWorkout: null, recoveryTime: 48 },\n    glutes: { lastWorkout: null, recoveryTime: 72 }\n  }\n};\n\nconst workoutSlice = createSlice({\n  name: 'workout',\n  initialState,\n  reducers: {\n    addWorkout: (state, action) => {\n      const { date, muscles, intensity, name, exercises } = action.payload;\n      \n      console.log('Redux: Adding workout with data:', { date, muscles, intensity, name });\n      \n      // Add the workout to history\n      const newWorkout = {\n        date,\n        muscles,\n        intensity,\n        name: name || 'Unnamed Workout',\n        id: Date.now().toString(),\n        exercises: exercises || []\n      };\n      \n      state.workouts.push(newWorkout);\n      \n      // Update last workout date for each muscle group\n      muscles.forEach(muscleName => {\n        // Convert display name to store key (lowercase, handle special cases)\n        const muscleKey = getMuscleKey(muscleName);\n        \n        console.log(`Updating muscle group: ${muscleName} (key: ${muscleKey}) with workout date:`, date);\n        \n        if (state.muscleStatus[muscleKey]) {\n          state.muscleStatus[muscleKey].lastWorkout = date;\n        } else {\n          // If muscle doesn't exist in state, add it with default recovery time\n          state.muscleStatus[muscleKey] = {\n            lastWorkout: date,\n            recoveryTime: 48 // Default recovery time in hours\n          };\n        }\n      });\n      \n      console.log('Updated muscle status:', state.muscleStatus);\n      console.log('Total workouts in history:', state.workouts.length);\n    },\n    clearWorkouts: (state) => {\n      return initialState;\n    }\n  }\n});\n\nexport const { addWorkout, clearWorkouts } = workoutSlice.actions;\nexport default workoutSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}